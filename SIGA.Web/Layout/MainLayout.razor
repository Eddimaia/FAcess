@using SIGA.Application.Handles.Interfaces
@using SIGA.Web.Security.Interfaces
@using System.Security.Claims

@inherits LayoutComponentBase

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                SIGA
                <MudSpacer />
                Bem-Vindo(a), @registeredName
                <MudSpacer />
                <MudAvatar Src="https://via.placeholder.com/150" Size="Size.Medium" />
            </MudAppBar>
            <MudDrawer @bind-Open="@_drawerOpen">
                <MudNavMenu>
                    <MudNavLink Href="/" Match="NavLinkMatch.All">Início</MudNavLink>
                    <MudNavGroup Title="Gestão" Expanded="true">
                        <MudNavLink Href="/register" Match="NavLinkMatch.Prefix">Adicionar Usuário</MudNavLink>
                    </MudNavGroup>
                    <MudNavLink Href="/about" Match="NavLinkMatch.Prefix">Sobre</MudNavLink>
                    <MudNavLink Match="NavLinkMatch.Prefix" OnClick="LogoutAsync">Sair</MudNavLink>
                </MudNavMenu>
            </MudDrawer>
            <MudMainContent>
                @Body
            </MudMainContent>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        <SIGA.Web.Components.Login.RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code {
    [Inject]
    public ILogoutHandler Handler { get; set; } = null!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    public ICustomAuthStateProvider AuthenticationStateProvider { get; set; } = null!;

    bool _drawerOpen = false;
    private ClaimsPrincipal? user;
    private string? registeredName;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public async Task LogoutAsync()
    {

        if (await AuthenticationStateProvider.CheckAuthenticatedAsync())
        {
            await Handler.LogoutAsync();
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            AuthenticationStateProvider.NotifyAuthenticationStateChanged();
            NavigationManager.NavigateTo("/Login");
        }

    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        registeredName = user.FindFirst("RegisteredName")?.Value;
    }
}